// ************************************************************************ //
// WARNING
// -------
// The types declared in this file were generated from data read from a
// Type Library. If this type library is explicitly or indirectly (via
// another type library referring to this type library) re-imported, or the
// 'Refresh' command of the Type Library Editor activated while editing the
// Type Library, the contents of this file will be regenerated and all
// manual modifications will be lost.
// ************************************************************************ //

// $Rev: 92848 $
// File generated on 14.04.2019 15:59:26 from Type Library described below.

// ************************************************************************  //
// Type Lib: C:\Users\mvideo\Documents\Embarcadero\Studio\Projects\TestBezierLine Basis 3\TestBezier (1)
// LIBID: {4736EC14-65DF-4979-8BBF-3B8948FD46E6}
// LCID: 0
// Helpfile:
// HelpString:
// DepndLst:
//   (1) v2.0 stdole, (C:\Windows\SysWOW64\stdole2.tlb)
// SYS_KIND: SYS_WIN32
// ************************************************************************ //
#ifndef   TestBezier_TLBH
#define   TestBezier_TLBH

#pragma option push -b -w-inl -w-8118
#pragma pack(push, 4)

#if !defined(__UTILCLS_H)
#include <utilcls.h>
#endif
#if !defined(__UTILCLS_H_VERSION) || (__UTILCLS_H_VERSION < 0x0700)
//
// The code generated by the TLIBIMP utility or the Import|TypeLibrary
// and Import|ActiveX feature of C++Builder rely on specific versions of
// the header file UTILCLS.H found in the INCLUDE\VCL directory. If an
// older version of the file is detected, you probably need an update/patch.
//
#error "This file requires a newer version of the header UTILCLS.H" \
       "You need to apply an update/patch to your copy of C++Builder"
#endif
#include <olectl.h>
#include <ocidl.h>
#if defined(USING_ATLVCL) || defined(USING_ATL)
#if !defined(__TLB_NO_EVENT_WRAPPERS)
#include <atl/atlmod.h>
#endif
#endif

#include <System.Win.StdVCL.hpp>

typedef TComInterface<System::Win::Stdvcl::IStrings> IStringsPtr;
typedef TComInterface<System::Win::Stdvcl::IStringsDisp> IStringsDispPtr;

namespace Testbezier_tlb
{

// *********************************************************************//
// HelpString:
// Version:    1.0
// *********************************************************************//


// *********************************************************************//
// GUIDS declared in the TypeLibrary. Following prefixes are used:
//   Type Libraries     : LIBID_xxxx
//   CoClasses          : CLSID_xxxx
//   DISPInterfaces     : DIID_xxxx
//   Non-DISP interfaces: IID_xxxx
// *********************************************************************//
extern __declspec (package) const GUID LIBID_TestBezier;
extern __declspec (package) const GUID IID_ITestLibBez777;
extern __declspec (package) const GUID CLSID_TestLibBez777;

// *********************************************************************//
// Forward declaration of types defined in TypeLibrary
// *********************************************************************//
interface DECLSPEC_UUID("{0F5497FF-EFA2-4B48-B302-201FFA345578}") ITestLibBez777;
typedef TComInterface<ITestLibBez777, &IID_ITestLibBez777> ITestLibBez777Ptr;


// *********************************************************************//
// Declaration of CoClasses defined in Type Library
// (NOTE: Here we map each CoClass to its Default Interface)
//
// The LIBID_OF_ macro(s) map a LIBID_OF_CoClassName to the GUID of this
// TypeLibrary. It simplifies the updating of macros when CoClass name
// change.
// *********************************************************************//
typedef ITestLibBez777 TestLibBez777;
typedef ITestLibBez777Ptr TestLibBez777Ptr;

#define LIBID_OF_TestLibBez777 (&LIBID_TestBezier)
// *********************************************************************//
// Interface: ITestLibBez777
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0F5497FF-EFA2-4B48-B302-201FFA345578}
// *********************************************************************//
interface ITestLibBez777  : public IDispatch
{
public:

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)



#endif //   __TLB_NO_INTERFACE_WRAPPERS

};

#if !defined(__TLB_NO_INTERFACE_WRAPPERS)
// *********************************************************************//
// SmartIntf: TCOMITestLibBez777
// Interface: ITestLibBez777
// *********************************************************************//
template <class T /* ITestLibBez777 */ >
class TCOMITestLibBez777T : public TComInterface<ITestLibBez777>, public TComInterfaceBase<IUnknown>
{
public:
  TCOMITestLibBez777T() {}
  TCOMITestLibBez777T(ITestLibBez777 *intf, bool addRef = false) : TComInterface<ITestLibBez777>(intf, addRef) {}
  TCOMITestLibBez777T(const TCOMITestLibBez777T& src) : TComInterface<ITestLibBez777>(src) {}
  TCOMITestLibBez777T& operator=(const TCOMITestLibBez777T& src) { Bind(src, true); return *this;}


};
typedef TCOMITestLibBez777T<ITestLibBez777> TCOMITestLibBez777;

// *********************************************************************//
// DispIntf:  ITestLibBez777
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0F5497FF-EFA2-4B48-B302-201FFA345578}
// *********************************************************************//
template<class T>
class ITestLibBez777DispT : public TAutoDriver<ITestLibBez777>
{
public:
  ITestLibBez777DispT(){}

  ITestLibBez777DispT(ITestLibBez777 *pintf)
  {
    TAutoDriver<ITestLibBez777>::Bind(pintf, false);
  }

  ITestLibBez777DispT(ITestLibBez777Ptr pintf)
  {
    TAutoDriver<ITestLibBez777>::Bind(pintf, true);
  }

  ITestLibBez777DispT& operator=(ITestLibBez777 *pintf)
  {
    TAutoDriver<ITestLibBez777>::Bind(pintf, false);
    return *this;
  }

  ITestLibBez777DispT& operator=(ITestLibBez777Ptr pintf)
  {
    TAutoDriver<ITestLibBez777>::Bind(pintf, true);
    return *this;
  }

  HRESULT BindDefault()
  {
    return OLECHECK(Bind(CLSID_TestLibBez777));
  }

  HRESULT BindRunning()
  {
    return BindToActive(CLSID_TestLibBez777);
  }


};
typedef ITestLibBez777DispT<ITestLibBez777> ITestLibBez777Disp;

// *********************************************************************//
// SmartIntf: TCOMITestLibBez777
// Interface: ITestLibBez777
// *********************************************************************//
// *********************************************************************//
// DispIntf:  ITestLibBez777
// Flags:     (4416) Dual OleAutomation Dispatchable
// GUID:      {0F5497FF-EFA2-4B48-B302-201FFA345578}
// *********************************************************************//
// *********************************************************************//
// The following typedefs expose classes (named CoCoClassName) that
// provide static Create() and CreateRemote(LPWSTR machineName) methods
// for creating an instance of an exposed object. These functions can
// be used by client wishing to automate CoClasses exposed by this
// typelibrary.
// *********************************************************************//

// *********************************************************************//
// COCLASS DEFAULT INTERFACE CREATOR
// CoClass  : TestLibBez777
// Interface: TCOMITestLibBez777
// *********************************************************************//
typedef TCoClassCreatorT<TCOMITestLibBez777, ITestLibBez777, &CLSID_TestLibBez777, &IID_ITestLibBez777> CoTestLibBez777;
#endif  //   __TLB_NO_INTERFACE_WRAPPERS


};     // namespace Testbezier_tlb

#if !defined(NO_IMPLICIT_NAMESPACE_USE)
using  namespace Testbezier_tlb;
#endif

#pragma pack(pop)
#pragma option pop

#endif // TestBezier_TLBH

